
buildBranch = env.BRANCH_NAME ?: 'master'
gitURL = 'https://github.com/komalsingh54/training-tool.git'
DOCKER_IMAGE = ''

pipeline {
  agent any
  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
  }
  parameters {
    string(name: 'ARTEFACT_VERSION_NUMBER',
      defaultValue: '',
      description: "Which artefact version to deploy.")

    choice(name: 'VERSION_BUMP_TYPE',
      choices: ['Patch', 'Minor', 'Major'],
      description: 'Which version type to bump the application to.')

  }
  environment {
    PORT=3000
    MONGODB_URL='mongodb://127.0.0.1:27017/training-tool'
    JWT_SECRET='thisisasamplesecret'
    JWT_ACCESS_EXPIRATION_MINUTES=30
    JWT_REFRESH_EXPIRATION_DAYS=30
    REGISTRY = "komalsingh54/training-tool"
    REGISTRY_CREDENTIAL = 'docker-hub'
  }
  stages {
    stage("Read Environment Configuration") {
      agent any
      steps {
        readEnvironmentConfig()
      }
    }
    stage("Setup Workspave") {
      agent any
      steps {
        sh "rm -rf ./*"
        git changelog: false, poll: false, url: gitURL, branch: buildBranch
        dir('user-management') {
          sh "yarn install"
        }
      }
    }
    stage("Test & Scan") {
      parallel {
        stage("Test") {
          steps{
            dir('user-management') {
              sh "yarn install"
              sh "yarn run coverage"
            }
          }
        }
        stage("scan") {
          steps{
            dir('user-management') {
              sh "yarn install"
              sh "yarn run sonar"
            }
          }
        }
      }
    }
    stage('Build docker image'){
      steps {
        dir('user-management') {
          DOCKER_IMAGE = docker.build REGISTRY
        }
      }
    }
    stage('Deploy our image') {
      steps {
        script {
          docker.withRegistry('', REGISTRY_CREDENTIAL) {
            DOCKER_IMAGE.push()
          }
        }
      }
    }
    stage('Cleaning up') {
      steps {
        sh "docker rmi $REGISTRY"
      }
    }
  }
}


void readEnvironmentConfig() {
  echo "Reading Environment Configuration"
  checkout scm
}
