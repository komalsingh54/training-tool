
buildBranch = env.BRANCH_NAME ?: 'master'
USER_NAME = ''
PASSWORD = ''
gitURL = 'https://github.com/komalsingh54/training-tool.git'

pipeline {
  agent any
  environment {
    PORT=3000
    MONGODB_URL='mongodb://127.0.0.1:27017/training-tool'
    JWT_SECRET='thisisasamplesecret'
    JWT_ACCESS_EXPIRATION_MINUTES=30
    JWT_REFRESH_EXPIRATION_DAYS=30
    registry = "komalsingh54/user-management"
    registryCredential = 'docker-hub'
  }
  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
  }
  parameters {
    string(name: 'ARTEFACT_VERSION_NUMBER',
      defaultValue: '',
      description: "Which artefact version to deploy.")

    choice(name: 'VERSION_BUMP_TYPE',
      choices: ['Patch', 'Minor', 'Major'],
      description: 'Which version type to bump the application to.')

    booleanParam(defaultValue: true, name: 'DEPLOY', description: 'Do you want to deploy?')
  }

  stages {
    stage("Read Environment Configuration & Setup") {
      agent any
      steps {
        readEnvironmentConfig()
      }
    }
    stage("Test & Scan") {
      parallel {
        stage("Test") {
          steps{
            dir('user-management') {
              sh "yarn install"
              sh "yarn run coverage"
            }
          }
        }
        stage("scan") {
          steps{
            dir('user-management') {
              sh "yarn install"
              sh "yarn run sonar"
            }
          }
        }
      }
    }
    stage('Build docker image'){
      steps {
        dir('user-management') {
          sh 'yarn install'
          sh 'yarn docker:build'
        }
      }
    }
    stage('push image') {
      steps{
        dir('user-management') {
          sh "docker tag $registry $registry:$BUILD_NUMBER"
          sh "docker login --username $USER_NAME --password $PASSWORD"
          sh "docker push $registry:$BUILD_NUMBER"
        }
      }
    }
    stage('Deploy our image') {
      when { expression { "${params.DEPLOY}" == true } }
      steps {
        script {
          dir('user-management') {
            sh "gcloud builds submit --tag gcr.io/burner-komsingh/user-management:$BUILD_NUMBER ."
            sh 'kubectl create -f db-deployment.yml'
            sh 'kubectl create -f db-service.yml'
            sh 'kubectl create -f user-management-deployment.yml'
            sh 'kubectl create -f user-management.service.yml'
          }
        }
      }
    }
    stage('Cleaning up') {
      steps {
        sh "docker rmi $registry:$BUILD_NUMBER"
      }
    }
  }
}


void readEnvironmentConfig() {
  echo "Reading Environment Configuration"
  withCredentials([
    usernamePassword(credentialsId: registryCredential,
      usernameVariable: 'username',
      passwordVariable: 'password')
  ]) {
    USER_NAME = username
    PASSWORD = password
  }
  checkout scm
  sh "rm -rf ./*"
  git changelog: false, poll: false, url: gitURL, branch: buildBranch
}
